// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NICE.Timelines.DB.Models;

namespace NICE.Timelines.DB.Migrations
{
    [DbContext(typeof(TimelinesContext))]
    [Migration("20210707162107_NormaliseDB")]
    partial class NormaliseDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NICE.Timelines.DB.Models.Stage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StageId");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("NICE.Timelines.DB.Models.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StepId");

                    b.ToTable("Step");
                });

            modelBuilder.Entity("NICE.Timelines.DB.Models.TimelineTask", b =>
                {
                    b.Property<int>("TimelineTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ACID")
                        .HasColumnType("int")
                        .HasColumnName("ACID");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClickUpFolderId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClickUpListId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClickUpSpaceId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClickUpTaskId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.HasKey("TimelineTaskId");

                    b.HasIndex("StageId");

                    b.HasIndex("StepId");

                    b.ToTable("TimelineTask");
                });

            modelBuilder.Entity("NICE.Timelines.DB.Models.TimelineTask", b =>
                {
                    b.HasOne("NICE.Timelines.DB.Models.Stage", "Stage")
                        .WithMany("TimelineTasks")
                        .HasForeignKey("StageId")
                        .HasConstraintName("TimelineTasks_Stage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NICE.Timelines.DB.Models.Step", "Step")
                        .WithMany("TimelineTasks")
                        .HasForeignKey("StepId")
                        .HasConstraintName("TimelineTasks_Step")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("NICE.Timelines.DB.Models.Stage", b =>
                {
                    b.Navigation("TimelineTasks");
                });

            modelBuilder.Entity("NICE.Timelines.DB.Models.Step", b =>
                {
                    b.Navigation("TimelineTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
